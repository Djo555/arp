<!DOCTYPE html>
<html>
    <head>
        
        {% block stylesheets %}
            {{ encore_entry_link_tags('app') }}
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Open+Sans+Condensed:wght@300;700&display=swap" rel="stylesheet">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
        {% endblock %}
        {% block meta %}
        <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
        {% endblock %}
        
    </head>
    <body>
    
    {%  include "base/header.html.twig" %}
        {% for label, messages in app.flashes %}
            {% for message in messages %}
            <div class="alert alert-{{ label == 'success' ? 'success' : 'warning' }} alert-dismissible fade show text-center w-50 mx-auto my-2" role="alert">
                                    {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
            {% endfor %}
        {% endfor %}

        {% block body %}{% endblock %}
        {%  include "base/footer.html.twig" %}
        {% block javascripts %}
            {{ encore_entry_script_tags('app') }}
                    <script>
document.addEventListener('DOMContentLoaded', () => {
  const dropdownToggles = document.querySelectorAll('.custom-dropdown-toggle');

  dropdownToggles.forEach(toggle => {
    toggle.addEventListener('click', (event) => {
      event.preventDefault();
      event.stopPropagation(); // Prevent the event from propagating to the document's click listener

      // Get the parent <li> of the clicked element
      const parentLi = toggle.closest('.nav-item');

      // Check if the menu is already active
      const isActive = parentLi.classList.contains('active');

      // Close all dropdown menus and remove the active class
      document.querySelectorAll('.custom-dropdown-menu.active').forEach(menu => {
        menu.classList.remove('active');
      });
      document.querySelectorAll('.nav-item.active').forEach(item => {
        item.classList.remove('active');
      });

      // If the menu wasn't active, activate it
      if (!isActive) {
        const dropdownId = toggle.getAttribute('data-dropdown');
        const dropdownMenu = document.getElementById(dropdownId);
        if (dropdownMenu) {
          dropdownMenu.classList.add('active');
          parentLi.classList.add('active');
        }
      }
    });
  });

  // Close dropdowns when clicking outside
  document.addEventListener('click', (event) => {
    if (!event.target.closest('.custom-dropdown-toggle') && !event.target.closest('.custom-dropdown-menu')) {
      document.querySelectorAll('.custom-dropdown-menu.active').forEach(menu => {
        menu.classList.remove('active');
      });
      document.querySelectorAll('.nav-item.active').forEach(item => {
        item.classList.remove('active');
      });
    }
  });
});
</script>
        <script src=" https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"></script>    
        {% endblock %}
    </body>
</html>

